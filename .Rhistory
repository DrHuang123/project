Lmat <- matrix(0, nrow = (ncond - 1) * 2, ncol = ncond * ncmymat)
row_index <- 1
for (ix in 2:ncond) {
# cos 对比
Lmat[row_index, 2] <- 1
Lmat[row_index, (ix - 1)*ncmymat + 2] <- -1
row_index <- row_index + 1
# sin 对比
Lmat[row_index, 3] <- 1
Lmat[row_index, (ix - 1)*ncmymat + 3] <- -1
row_index <- row_index + 1
}
# ---------------------------------------------------------------
# 外层: 计算 store_var + 构建 yList
# ---------------------------------------------------------------
if (verbose) message("Preparing variables and estimating error variance...")
p <- nrow(mydata)
store_var <- matrix(0, ncol = ncond, nrow = 500)  # 前500基因
caps <- length(time)/(ncond*length(unique(time)))
capi <- length(unique(time))
xtx <- t(mymat) %*% mymat
xtxinv <- solve(xtx)
xtxinvxt <- xtxinv %*% t(mymat)
nnull = 1000
alpha = 0.05
# 这几行你原本的
gamma_hat = betavec = nullgamma_hat = matrix(0, nrow=ncond, ncol=ncmymat)
y = matrix(0, nrow=ncond, ncol=nrmymat)
var_error = nullvar_error = rep(0, ncond)
varcov = nullvarcov = matrix(0, nrow=(ncmymat*ncond), ncol=(ncmymat*ncond))
# 新建一个列表 yList, 存每个基因的 y 矩阵
yList <- vector("list", 500)
# 计算 store_var + 赋值 yList
for (i in 1:500) {
for (i1 in 1:ncond) {
i2 <- (i1 - 1)*caps*capi + 1
i3 <- i1*caps*capi
y[i1, ] <- mydata[i, i2:i3]
gamma_hat[i1, ] <- xtxinvxt %*% y[i1, ]
residuals <- y[i1, ] - mymat %*% gamma_hat[i1, ]
var_error[i1] <- t(residuals) %*% residuals / (nrmymat - 3)
}
store_var[i, ] <- var_error
yList[[i]] <- y  # 存到列表
}
if (verbose) message("Estimating prior distribution shape and scale parameters of the error variance...")
sigma2gc <- matrix(0, nrow=500, ncol=ncond)
psic0 <- rep(0, ncond)
psic1 <- rep(0, ncond)
for (i1 in 1:ncond) {
sigma2gc[, i1] <- store_var[, i1]
psic0[i1] <- (2 + (mean(sigma2gc[, i1]^2)/(mean(sigma2gc[, i1])^2) - 1)^(-1))
psic1[i1] <- 1 / ((psic0[i1]-1)*mean(sigma2gc[, i1]))
}
# ---------------------------------------------------------------
# (B) 改 myfunc1: 增加一个参数 yMatrix
#     把所有 y[i1, ] => yMatrix[i1, ]
# ---------------------------------------------------------------
if (verbose) message("Fitting the model and computing null distribution...")
myfunc1 <- function(i, yMatrix) {
gamma_hat <- betavec <- nullgamma_hat <- matrix(0, nrow=ncond, ncol=ncmymat)
nully     <- matrix(0, nrow=ncond, ncol=nrmymat)
varcov    <- nullvarcov <- matrix(0, nrow=(ncmymat*ncond), ncol=(ncmymat*ncond))
for (i1 in 1:ncond) {
gamma_hat[i1, ] <- xtxinvxt %*% yMatrix[i1, ]   # <-- 改这里
q <- yMatrix[i1, ] - mymat %*% gamma_hat[i1, ]
term1 <- as.numeric(1 + 0.5*psic1[i1]*sum(q^2))
term11 <- caps*capi/2 + psic0[i1]
term12 <- term11 * (
-psic1[i1]*xtx/term1 +
psic1[i1]^2 * t(mymat)%*%q%*%t(q)%*%mymat/(term1^2)
)
idx_start <- (i1-1)*ncmymat + 1
idx_end   <- i1*ncmymat
varcov[idx_start:idx_end, idx_start:idx_end] <- as.matrix(-solve(term12))
}
theta_hat <- as.vector(t(gamma_hat))
Lcov <- solve(Lmat %*% varcov %*% t(Lmat))
tssec2 <- as.numeric(t(Lmat %*% theta_hat) %*% Lcov %*% (Lmat %*% theta_hat))
# 构造null分布
betavec[, 1] <- gamma_hat[, 1]
tempo1 <- apply(gamma_hat[, -1], 2, mean)
for (i1 in 1:ncond) {
betavec[i1, -1] <- tempo1
}
myfunull <- function(itn) {
set.seed(i*itn)
for (i1 in 1:ncond) {
nully[i1, ] <- mymat %*% betavec[i1, ] +
rnorm(caps*capi)*sqrt(store_var[i, i1])
nullgamma_hat[i1, ] <- xtxinvxt %*% nully[i1, ]
nullq <- nully[i1, ] - mymat %*% nullgamma_hat[i1, ]
nullqtq <- sum(nullq^2)
nullterm1 <- as.numeric(1 + 0.5*psic1[i1]*nullqtq)
nullterm11 <- caps*capi/2 + psic0[i1]
nullterm12 <- nullterm11*(
-psic1[i1]*xtx/nullterm1 +
psic1[i1]^2 * t(mymat)%*%q%*%t(q)%*%mymat/(nullterm1^2)
)
idx_start <- (i1-1)*ncmymat + 1
idx_end   <- i1*ncmymat
nullvarcov[idx_start:idx_end, idx_start:idx_end] <- as.matrix(-solve(nullterm12))
}
nulltheta_hat <- as.vector(t(nullgamma_hat))
nullLcov <- solve(Lmat %*% nullvarcov %*% t(Lmat))
tempo2 <- Lmat %*% nulltheta_hat
nullresults <- as.numeric(t(tempo2) %*% nullLcov %*% tempo2)
return(nullresults)
}
nullresults <- as.numeric(lapply(1:nnull, myfunull))
pvaluesec2  <- length(which(nullresults > tssec2)) / nnull
df_this_gene <- data.frame(
Gene      = i,
Condition = 1:ncond,
Alpha     = gamma_hat[,1],
BetaCos   = gamma_hat[,2],
BetaSin   = gamma_hat[,3]
)
attr(df_this_gene, "TestStat") <- tssec2
attr(df_this_gene, "PValue")   <- pvaluesec2
return(df_this_gene)
}
# ---------------------------------------------------------------
# (C) 并行: 不再 y <<- yList[[it]]
#    而是  myfunc1(it, yList[[it]])
# ---------------------------------------------------------------
if (verbose) message("Running parallel analysis...")
library(doParallel)
registerDoParallel(cores = parallel::detectCores() - 1)
out_list <- foreach(it = 1:500) %dopar% {
# 直接调用 myfunc1, 把 yList[[it]] 传给 yMatrix 参数
myfunc1(it, yList[[it]])
}
if (verbose) message("Gathering test statistics and p-values...")
teststat   <- sapply(out_list, function(x) attr(x, "TestStat"))
pvaluesec2 <- sapply(out_list, function(x) attr(x, "PValue"))
res_df <- do.call(rbind, out_list)
if (verbose) message("Adjusting p-values...")
adj_pvalues <- p.adjust(pvaluesec2, method = "BH")
if (verbose) message("Adding gene names...")
gene_names <- rownames(data)
res_df$GeneName <- rep(gene_names[1:500], each = ncond)
if (verbose) message("Returning final results...")
return(list(
TestStatistics = teststat,
PValues        = pvaluesec2,
AdjustedPValues= adj_pvalues,
FittedParams   = res_df
))
}
result1<-perform_analysis(data, time, ncond, period = 24, verbose = TRUE)
table(result1$AdjustedPValues)
table(result1$AdjustedPValues<0.05)
head(result1)
result1$FittedParams$Gene
head(result1$FittedParams$Gene)
head(result1$FittedParams$GeneName)
result1$AdjustedPValues<0.05
which(result1$AdjustedPValues<0.05)
# 筛选出 P 值小于 0.05 的基因索引
significant_indices <- which(result1$AdjustedPValues < 0.05)
# 获取对应的基因名
significant_gene_names <- result1$FittedParams$GeneName[unique(result1$FittedParams$Gene[significant_indices])]
# 打印显著基因的索引和基因名
print(significant_indices)
print(significant_gene_names)
plot_rhythmic_gene_ggplot <- function(
fitted_params,
gene_id,
period     = 24,
time_range = seq(0, 24, by = 0.1),
colors     = c("Condition1" = "blue", "Condition2" = "red"),
...
) {
# 加载 ggplot2
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop("The ggplot2 package is required but not installed.")
}
library(ggplot2)
# 1) 从 fitted_params 里筛出感兴趣基因
gene_data <- subset(fitted_params, Gene == gene_id)
if (nrow(gene_data) < 2) {
stop("Error: This function assumes 2 conditions. Check your data or ncond.")
}
# 获取基因名
gene_name <- unique(gene_data$GeneName)
if (length(gene_name) != 1) {
stop("Error: GeneName should be unique for the specified gene_id.")
}
# 2) 分别取 Condition=1、Condition=2 对应的 (Alpha, BetaCos, BetaSin)
cond1_data <- subset(gene_data, Condition == 1)
cond2_data <- subset(gene_data, Condition == 2)
if (nrow(cond1_data) == 0 || nrow(cond2_data) == 0) {
stop("Error: Both conditions must be present for the specified gene.")
}
# 提取数值(Alpha, BetaCos, BetaSin)
alpha1  <- cond1_data$Alpha
bcos1   <- cond1_data$BetaCos
bsin1   <- cond1_data$BetaSin
alpha2  <- cond2_data$Alpha
bcos2   <- cond2_data$BetaCos
bsin2   <- cond2_data$BetaSin
# 3) 计算在 time_range 上的预测表达值
#    formula = alpha + bcos * cos(2*pi*t/period) + bsin * sin(2*pi*t/period)
pred_cond1 <- alpha1 + bcos1 * cos(2 * pi * time_range / period) +
bsin1 * sin(2 * pi * time_range / period)
pred_cond2 <- alpha2 + bcos2 * cos(2 * pi * time_range / period) +
bsin2 * sin(2 * pi * time_range / period)
# 4) 构建数据框用于 ggplot
plot_df <- data.frame(
Time = rep(time_range, 2),
Expression = c(pred_cond1, pred_cond2),
Condition = factor(rep(c("Condition1", "Condition2"), each = length(time_range)),
levels = c("Condition1", "Condition2"))
)
# 5) 画图
p <- ggplot(plot_df, aes(x = Time, y = Expression, color = Condition)) +
geom_line(linewidth = 1.2) +  # 修改这里
scale_color_manual(values = colors) +
labs(
title = paste("Gene", gene_name, "(", gene_id, "): Two-Condition Rhythmic Fit"),
x = "Time (h)",
y = "Expression (fitted)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.title = element_blank()
)
return(p)
}
plot_rhythmic_gene_ggplot(
fitted_params = result1$FittedParams,
gene_id = 5,
period = 24
)
plot_rhythmic_gene_ggplot <- function(
fitted_params,
gene_id,
period     = 24,
time_range = seq(0, 24, by = 0.1),
colors     = c("Condition1" = "blue", "Condition2" = "red"),
...
) {
# 加载 ggplot2
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop("The ggplot2 package is required but not installed.")
}
library(ggplot2)
# 1) 从 fitted_params 里筛出感兴趣基因
gene_data <- subset(fitted_params, Gene == gene_id)
if (nrow(gene_data) < 2) {
stop("Error: This function assumes 2 conditions. Check your data or ncond.")
}
# 获取基因名
gene_name <- unique(gene_data$GeneName)
if (length(gene_name) != 1) {
stop("Error: GeneName should be unique for the specified gene_id.")
}
# 2) 分别取 Condition=1、Condition=2 对应的 (Alpha, BetaCos, BetaSin)
cond1_data <- subset(gene_data, Condition == 1)
cond2_data <- subset(gene_data, Condition == 2)
if (nrow(cond1_data) == 0 || nrow(cond2_data) == 0) {
stop("Error: Both conditions must be present for the specified gene.")
}
# 提取数值(Alpha, BetaCos, BetaSin)
alpha1  <- cond1_data$Alpha
bcos1   <- cond1_data$BetaCos
bsin1   <- cond1_data$BetaSin
alpha2  <- cond2_data$Alpha
bcos2   <- cond2_data$BetaCos
bsin2   <- cond2_data$BetaSin
# 3) 计算在 time_range 上的预测表达值
#    formula = alpha + bcos * cos(2*pi*t/period) + bsin * sin(2*pi*t/period)
pred_cond1 <- alpha1 + bcos1 * cos(2 * pi * time_range / period) +
bsin1 * sin(2 * pi * time_range / period)
pred_cond2 <- alpha2 + bcos2 * cos(2 * pi * time_range / period) +
bsin2 * sin(2 * pi * time_range / period)
# 4) 构建数据框用于 ggplot
plot_df <- data.frame(
Time = rep(time_range, 2),
Expression = c(pred_cond1, pred_cond2),
Condition = factor(rep(c("Condition1", "Condition2"), each = length(time_range)),
levels = c("Condition1", "Condition2"))
)
# 5) 画图
p <- ggplot(plot_df, aes(x = Time, y = Expression, color = Condition)) +
geom_line(linewidth = 1.2) +  # 修改这里
scale_color_manual(values = colors) +
labs(
title = paste("Gene(", gene_id, ")", gene_name)
x = "Time (h)",
plot_rhythmic_gene_ggplot <- function(
fitted_params,
gene_id,
period     = 24,
time_range = seq(0, 24, by = 0.1),
colors     = c("Condition1" = "blue", "Condition2" = "red"),
...
) {
# 加载 ggplot2
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop("The ggplot2 package is required but not installed.")
}
library(ggplot2)
# 1) 从 fitted_params 里筛出感兴趣基因
gene_data <- subset(fitted_params, Gene == gene_id)
if (nrow(gene_data) < 2) {
stop("Error: This function assumes 2 conditions. Check your data or ncond.")
}
# 获取基因名
gene_name <- unique(gene_data$GeneName)
if (length(gene_name) != 1) {
stop("Error: GeneName should be unique for the specified gene_id.")
}
# 2) 分别取 Condition=1、Condition=2 对应的 (Alpha, BetaCos, BetaSin)
cond1_data <- subset(gene_data, Condition == 1)
cond2_data <- subset(gene_data, Condition == 2)
if (nrow(cond1_data) == 0 || nrow(cond2_data) == 0) {
stop("Error: Both conditions must be present for the specified gene.")
}
# 提取数值(Alpha, BetaCos, BetaSin)
alpha1  <- cond1_data$Alpha
bcos1   <- cond1_data$BetaCos
bsin1   <- cond1_data$BetaSin
alpha2  <- cond2_data$Alpha
bcos2   <- cond2_data$BetaCos
bsin2   <- cond2_data$BetaSin
# 3) 计算在 time_range 上的预测表达值
#    formula = alpha + bcos * cos(2*pi*t/period) + bsin * sin(2*pi*t/period)
pred_cond1 <- alpha1 + bcos1 * cos(2 * pi * time_range / period) +
bsin1 * sin(2 * pi * time_range / period)
pred_cond2 <- alpha2 + bcos2 * cos(2 * pi * time_range / period) +
bsin2 * sin(2 * pi * time_range / period)
# 4) 构建数据框用于 ggplot
plot_df <- data.frame(
Time = rep(time_range, 2),
Expression = c(pred_cond1, pred_cond2),
Condition = factor(rep(c("Condition1", "Condition2"), each = length(time_range)),
levels = c("Condition1", "Condition2"))
)
# 5) 画图
p <- ggplot(plot_df, aes(x = Time, y = Expression, color = Condition)) +
geom_line(linewidth = 1.2) +  # 修改这里
scale_color_manual(values = colors) +
labs(
title = paste("Gene(", gene_id, ")", gene_name),
x = "Time (h)",
y = "Expression (fitted)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.title = element_blank()
)
return(p)
}
result1$AdjustedPValues<0.05
which(result1$AdjustedPValues<0.05)
plot_rhythmic_gene_ggplot(
fitted_params = result1$FittedParams,
gene_id = 38,
period = 24
)
plot_rhythmic_gene_ggplot <- function(
fitted_params,
gene_id,
period     = 24,
time_range = seq(0, 24, by = 0.1),
colors     = c("Condition1" = "blue", "Condition2" = "red"),
...
) {
# 加载 ggplot2
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop("The ggplot2 package is required but not installed.")
}
library(ggplot2)
# 1) 从 fitted_params 里筛出感兴趣基因
gene_data <- subset(fitted_params, Gene == gene_id)
if (nrow(gene_data) < 2) {
stop("Error: This function assumes 2 conditions. Check your data or ncond.")
}
# 获取基因名
gene_name <- unique(gene_data$GeneName)
if (length(gene_name) != 1) {
stop("Error: GeneName should be unique for the specified gene_id.")
}
# 2) 分别取 Condition=1、Condition=2 对应的 (Alpha, BetaCos, BetaSin)
cond1_data <- subset(gene_data, Condition == 1)
cond2_data <- subset(gene_data, Condition == 2)
if (nrow(cond1_data) == 0 || nrow(cond2_data) == 0) {
stop("Error: Both conditions must be present for the specified gene.")
}
# 提取数值(Alpha, BetaCos, BetaSin)
alpha1  <- cond1_data$Alpha
bcos1   <- cond1_data$BetaCos
bsin1   <- cond1_data$BetaSin
alpha2  <- cond2_data$Alpha
bcos2   <- cond2_data$BetaCos
bsin2   <- cond2_data$BetaSin
# 3) 计算在 time_range 上的预测表达值
#    formula = alpha + bcos * cos(2*pi*t/period) + bsin * sin(2*pi*t/period)
pred_cond1 <- alpha1 + bcos1 * cos(2 * pi * time_range / period) +
bsin1 * sin(2 * pi * time_range / period)
pred_cond2 <- alpha2 + bcos2 * cos(2 * pi * time_range / period) +
bsin2 * sin(2 * pi * time_range / period)
# 4) 构建数据框用于 ggplot
plot_df <- data.frame(
Time = rep(time_range, 2),
Expression = c(pred_cond1, pred_cond2),
Condition = factor(rep(c("Condition1", "Condition2"), each = length(time_range)),
levels = c("Condition1", "Condition2"))
)
# 5) 画图
p <- ggplot(plot_df, aes(x = Time, y = Expression, color = Condition)) +
geom_line(linewidth = 1.2) +  # 修改这里
scale_color_manual(values = colors) +
labs(
title = paste("Gene", gene_id, ":", gene_name),
x = "Time (h)",
y = "Expression (fitted)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.title = element_blank()
)
return(p)
}
plot_rhythmic_gene_ggplot(
fitted_params = result1$FittedParams,
gene_id = 38,
period = 24
)
plot_rhythmic_gene_ggplot(
fitted_params = result1$FittedParams,
gene_id = 109,
period = 24
)
library(dryR)
drydata<-data[1:500,]
dim(drydata)
time
group
?dryseq
result2<-dryseq(
drydata,
group,
time,
period = 24)
table(result2$results$chosen_model==2|result2$results$chosen_model==3)
table(result1$AdjustedPValues<0.05)
dim(WT_LB_Ctrl)
dim(mydata)
WT_NF_Ctrl <- read.table("C:/Users/Weiyi/Downloads/STRP/Copy of WT_NF_Ctrl_RAW.txt", header = TRUE, sep = "\t") #G1
WT_LB_Ctrl <- read.table("C:/Users/Weiyi/Downloads/STRP/Copy of WT_LB_Ctrl_RAW.txt", header = TRUE, sep = "\t") #G2
merge_data <-cbind(WT_NF_Ctrl, WT_LB_Ctrl) #Comparison G1, G2
rownames(merge_data) <- merge_data[, 1]
data <- merge_data[, -c(1, 20)]
time<-c(rep(2, 3),rep(6, 3),rep(10, 3),rep(14, 3),rep(18, 3),rep(22, 3),rep(2, 3),rep(6, 3),rep(10, 3),rep(14, 3),rep(18, 3),rep(22, 3))
group <- c(rep(1, 18), rep(2, 18))
ncond<-2
period=24
library(DESeq2)
data <- as.matrix(data)
countData <- data[rowSums(data) != 0, ]
group <- as.factor(group)
colData <- data.frame(row.names = colnames(countData), group= group, time= time)
dds <- DESeq2::DESeqDataSetFromMatrix(
countData = countData,
colData   = colData,
design    = ~ group
)
if (verbose) message("Calculating size factors...")
dds <- DESeq2::estimateSizeFactors(dds)
if (verbose) message("Normalizing data...")
normalized_counts <- counts(dds, normalized = TRUE)
mydata <- normalized_counts
dim(mydata)
library(BayesianRhythm)
?BayesianRhythmicAnalysis
data(ExampleData)
data <- ExampleData[["CountData"]]
group <- ExampleData[["group"]]
time <- ExampleData[["time"]]
result <- BayesianRhythmicAnalysis(data, time, group, ncond = 2, period = 24, verbose = TRUE)
?PlotRhythmicGene
?PlotRhythmicGene
setwd("C:/Users/Weiyi/Downloads/project")
getwd()
C:/Users/Weiyi/Downloads/project
remove.packages("BayesianRhythm")
setwd("C:/Users/Weiyi/Downloads")
setwd("C:/Users/Weiyi/Downloads/project")
library(BayesianRhythm)
list.files()
remove.packages("BayesianRhythm")
devtools::document()  # 生成文档和 NAMESPACE 文件
devtools::install()   # 安装包
library(BayesianRhythm)
?BayesianRhythmicAnalysis
data(ExampleData)
data <- ExampleData[["CountData"]]
group <- ExampleData[["group"]]
time <- ExampleData[["time"]]
result <- BayesianRhythmicAnalysis(data, time, group, ncond = 2, period = 24, verbose = TRUE)
?PlotRhythmicGene
PlotRhythmicGene(
fitted_params = result$FittedParams,
gene_id       = 166,
period        = 24
)
